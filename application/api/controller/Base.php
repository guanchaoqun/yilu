<?php

namespace app\api\controller;

use think\Controller;
use think\Request;
use think\exception\HttpResponseException;
use think\Lang;
use think\Response;
use EasyWeChat\Factory;

class Base extends Controller
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub


//        if(session('?id')){
//            echo 'session is ok';
//        } else {
//            echo 'no session';
//
//            $config = [
//                'app_id' => 'wx562c71c4fa52228f',
//                'secret' => '969df605d5eaafecff40484d7d9eda64',
//                'response_type' => 'array',
//            ];
//            $app = Factory::officialAccount($config);
//
//            $response = $app->oauth->scopes(['snsapi_userinfo'])->redirect();
//
//            $response->send();
//            // return $response;
//            $user = $app->oauth->user();
//            dump($user);
//        }
//
        if (empty(session('id'))) {
             session('url',$_SERVER['REQUEST_URI']);
//        $wx = wxinit();
            //高级用户授权  用户同意 授权后中转到 index 方法中获取用户信息
            $this->redirect('/api/wechat/snsapiuserinfo');
        }


    }

    /**
     * 返回封装后的API数据到客户端
     * @access protected
     * @param mixed $data 要返回的数据
     * @param integer $code 返回的code
     * @param mixed $msg 提示信息
     * @param string $type 返回数据格式
     * @param array $header 发送的Header信息
     * @return void
     */
    protected function result_layui($data, $code = 0, $msg = '', $count = 0, $type = '', array $header = [])
    {
        $result = [
            'code' => $code,
            'msg' => $msg,
            'count' => $count,
            'time' => $this->request->server('REQUEST_TIME'),
            'data' => $data,
        ];
        $type = $type ?: $this->getResponseType();
        $response = Response::create($result, $type)->header($header);
        throw new HttpResponseException($response);
    }

    /**
     * 返回成功信息
     * @param string $msg 提示消息
     * @param null $data 数据
     */
    protected function result_success($msg = '', $data = NULL)
    {
        if (!$data) $data = (object)[];

        $result = [
            'code' => 200,
            'msg' => $msg,
            'time' => $this->request->server('REQUEST_TIME'),
            'data' => $data,
        ];

        $type = $this->getResponseType();
        $response = Response::create($result, $type)->header([]);
        throw new HttpResponseException($response);
    }

    /**
     * 返回失败信息
     * @param string $msg 提示消息
     */
    protected function result_error($msg = '')
    {
        $result = [
            'code' => 400,
            'msg' => $msg,
            'time' => $this->request->server('REQUEST_TIME'),
            'data' => (object)[],
        ];
        $type = $this->getResponseType();
        $response = Response::create($result, $type)->header([]);
        throw new HttpResponseException($response);
    }




}
