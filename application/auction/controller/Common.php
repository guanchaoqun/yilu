<?php
/**
 * 公共类
 * Created by PhpStorm.
 * User: GUO
 * Date: 2017/12/31
 * Time: 19:25
 */

namespace auction\auction\controller;


use think\exception\HttpResponseException;
use think\Response;
use think\Session;

class Common extends Base
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
//        session('golfuserid',17);exit;
//        if(!Session::get('golfuserid')){
//            $this->redirect('Index/snsapiUserinfo');
//        }else{
//
//        }

    }

    /**
     * 验证权限
     */
    public function valirbac(){
       if($this->request->isAjax()){
           $url = $this->request->post('url');//p($url);exit;
           if(!empty($url)){
               if(in_array($url,session('staffrbac')) || $url=='Personal/index'){
                    $data['url'] = url($url);
                   $this->result($data, 200, '拥有权限');
               }
           }
       }
        $this->result('', 400, '没有操作权限');
    }

    /**
     * 权限菜单
     */
    public function treeMenu()
    {
        $treeMenu = cache('DB_TREE_MENU_' . UID);

        if (!$treeMenu) {
            $where = [
                'ismenu' => 1,
                'module' => 'webcontroller',
            ];

            if (UID != '-1') {
                $where['status'] = 1;
            }

            $arModel = new \app\common\model\AuthRule();

            $lists     = $arModel->where($where)->order('sorts ASC,id ASC')->select();

            foreach ($lists as $k=>$v){
                parse_str($v['name_additional'],$additional);
                $lists[$k]['name_additional']=$additional;
            }

            $treeClass = new \expand\Tree();
            $treeMenu  = $treeClass->create($lists);
            //判断导航tree用户使用权限
            foreach ($treeMenu as $k => $val) {
                if (authcheck($val['name'], UID) == 'noauth') {
                    unset($treeMenu[ $k ]);
                }
            }
            //缓存菜单信息
            cache('DB_TREE_MENU_' . UID, $treeMenu);
        }

        return $treeMenu;
    }

    /**
     * 返回封装后的API数据到客户端
     * @access protected
     * @param mixed $data 要返回的数据
     * @param integer $code 返回的code
     * @param mixed $msg 提示信息
     * @param string $type 返回数据格式
     * @param array $header 发送的Header信息
     * @return void
     */
    protected function result_layui($data, $code = 0, $msg = '', $count = 0, $type = '', array $header = [])
    {
        $result = [
            'code'  => $code,
            'msg'   => $msg,
            'count' => $count,
            'time'  => $this->request->server('REQUEST_TIME'),
            'data'  => $data,
        ];
        $type = $type ?: $this->getResponseType();
        $response = Response::create($result, $type)->header($header);
        throw new HttpResponseException($response);
    }

    /**
     * 文件上传
     */
    public function upload(){
        $_FILES['Filedata']['name'] = $this->request->post('filename');

        // 获取表单上传文件 例如上传了001.jpg
        $file = request()->file('file');//p($file);exit;
        // 移动到框架应用根目录/public/uploads/ 目录下
        //本地上传目录设置
        
        $info = $file->move(ROOT_PATH . 'public' . DS . 'uploads');

        if ($info) {
            return ['code' => 200, 'content' => '/uploads/' . str_replace('\\', '/', $info->getSaveName()), 'msg' => '上传成功！'];
        } else {
            // 上传失败获取错误信息
            return ['code' => 400, 'msg' => $file->getError()];
        }
    }

    public function imgupload(){
        // 获取表单上传文件 例如上传了001.jpg
        $file = request()->file('file');
        // 移动到框架应用根目录/public/uploads/ 目录下
        $info = $file->move(ROOT_PATH . 'public' . DS . 'uploads');

        if ($info) {

            $this->result(['src'=>'/uploads/' . str_replace('\\', '/', $info->getSaveName())],200,'上传成功');

        } else {
            // 上传失败获取错误信息
            $this->result('',400,$file->getError());
        }
    }

    public function isunique($model,$where,$id=''){
        if($id){
            $res = $model->where($where)->where('id','NEQ',$id)->find();
        }else{
            $res = $model->where($where)->find();
        }
        if(!empty($res)){
            return false;
        }
        return true;
    }
}